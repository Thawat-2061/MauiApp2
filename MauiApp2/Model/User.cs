// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MauiApp2.Model;
//
//    var User = User.FromJson(jsonString);

namespace MauiApp2.Model
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class User
    {
        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("password")]
        public string Password { get; set; }

        [JsonProperty("profile")]
        public Profile Profile { get; set; }

        [JsonProperty("current_term_registration")]
        public List<Course> CurrentTermRegistration { get; set; }

        [JsonProperty("previous_terms_registration")]
        public List<PreviousTermsRegistration> PreviousTermsRegistration { get; set; }

        public User()
        {
            CurrentTermRegistration = new List<Course>();
            PreviousTermsRegistration = new List<PreviousTermsRegistration>();
        }

        public User(string uid, string email, string password, Profile profile)
        {
            Uid = uid;
            Email = email;
            Password = password;
            Profile = profile;
            CurrentTermRegistration = new List<Course>();
            PreviousTermsRegistration = new List<PreviousTermsRegistration>();
        }

        public void AddCurrentTermCourse(Course course)
        {
            CurrentTermRegistration.Add(course);
        }

        public void AddPreviousTerm(PreviousTermsRegistration term)
        {
            PreviousTermsRegistration.Add(term);
        }

        public static List<User> FromJson(string json)
        {
            if (string.IsNullOrEmpty(json))
            {
                return new List<User>();
            }

            try
            {
                return JsonConvert.DeserializeObject<List<User>>(json, Converter.Settings);
            }
            catch (JsonException ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error parsing JSON: {ex.Message}");
                return new List<User>();
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Converter.Settings);
        }
    }

    public partial class Course
    {
        [JsonProperty("course_id")]
        public string CourseId { get; set; }

        [JsonProperty("course_name")]
        public string CourseName { get; set; }

        public Course(string courseId, string courseName)
        {
            CourseId = courseId;
            CourseName = courseName;
        }
    }

    public partial class PreviousTermsRegistration
    {
        [JsonProperty("term")]
        public string Term { get; set; }

        [JsonProperty("courses")]
        public List<Course> Courses { get; set; }

        public PreviousTermsRegistration(string term, List<Course> courses)
        {
            Term = term;
            Courses = courses;
        }
    }

    public partial class Profile
{
    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("studentId")] // ตรงกับชื่อใน JSON
    public string StudentId { get; set; }

    [JsonProperty("faculty")]
    public string Faculty { get; set; }

    [JsonProperty("department")]
    public string Department { get; set; }

    [JsonProperty("year")]
    public int Year { get; set; }

    public Profile(string name, string studentId, string faculty, string department, int year)
    {
        Name = name;
        StudentId = studentId;
        Faculty = faculty;
        Department = department;
        Year = year;
    }
}

    public static class Serialize
    {
        public static string ToJson(this List<User> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}